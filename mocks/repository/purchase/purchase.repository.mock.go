// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package purchase_repository_mock

import (
	mock "github.com/stretchr/testify/mock"
	purchaseModel "haf.systems/purchases/models/purchase"

	utils "haf.systems/purchases/utils"
)

// PurchaseRepository is an autogenerated mock type for the PurchaseRepository type
type PurchaseRepository struct {
	mock.Mock
}

// GetPurchase provides a mock function with given fields: id
func (_m *PurchaseRepository) GetPurchase(id string) (*purchaseModel.Purchase, *utils.HTTPError) {
	ret := _m.Called(id)

	var r0 *purchaseModel.Purchase
	var r1 *utils.HTTPError
	if rf, ok := ret.Get(0).(func(string) (*purchaseModel.Purchase, *utils.HTTPError)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *purchaseModel.Purchase); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*purchaseModel.Purchase)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *utils.HTTPError); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.HTTPError)
		}
	}

	return r0, r1
}

// RecordPurchase provides a mock function with given fields: id, p
func (_m *PurchaseRepository) RecordPurchase(id string, p purchaseModel.Purchase) error {
	ret := _m.Called(id, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, purchaseModel.Purchase) error); ok {
		r0 = rf(id, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPurchaseRepository creates a new instance of PurchaseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPurchaseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PurchaseRepository {
	mock := &PurchaseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
